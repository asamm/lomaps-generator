plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.lombok' version '2.0.10'
    id 'io.freefair.lombok' version '5.3.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.20'
}
configurations { providedCompile }

repositories {
    // Asamm private repository
    maven {
        url = uri("https://maven.pkg.github.com/asamm/locus-api-store")
        credentials {
            username = System.getenv("GPR_USERNAME")
            password = System.getenv("GPR_TOKEN")
        }
    }

    // Maven repo
    maven {
        url  "https://jcenter.bintray.com"
    }
    jcenter()
}

dependencies {
    implementation project(":osmToolsCore")
    implementation project(":osmToolsDataWriter")
    implementation project(":maptiler-api")

    implementation("com.github.ajalt.clikt:clikt:4.4.0")

    implementation "com.asamm.locus:api-store:1.2.22"

    implementation 'org.apache.httpcomponents:httpclient:4.5'
    implementation 'org.apache.httpcomponents:httpcore:4.3.2'
    implementation group: 'net.minidev', name: 'json-smart', version: '2.3'
    implementation 'javax.mail:mail:1.4.1'
    implementation group: 'org.openstreetmap.osmosis', name: 'osmosis-core', version:'0.49.2'
    implementation 'commons-io:commons-io:2.7'
    implementation 'net.sf.kxml:kxml2:2.2.2'
    implementation 'org.locationtech.jts:jts-core:1.16.1'
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'org.xerial:sqlite-jdbc:3.15.1'

    compileOnly  'org.projectlombok:lombok:1.18.28'
    annotationProcessor  'org.projectlombok:lombok:1.18.28'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

}

def versionCode = "0.7.0"
def newArchiveName = "OsmToolsBasic_${versionCode}.jar"

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Main-Class': 'com.asamm.osmTools.OsmToolsCommandKt'
    }

    archiveFileName = newArchiveName;
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from('src/main/config/') {
        include 'plugin.xml'
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}


tasks.register('createPlanetUpdateShScript') {
    dependsOn jar
    doLast {
        def jarFile = new File(buildDir, "libs/${newArchiveName}")
        def scriptFile = new File(buildDir, "libs/update_planet_file.sh")
        scriptFile.text = """#!/bin/bash
        # Export paths to find pyosmium-up-to-date script
        export PATH=\$PATH:/home/osmtools/.local/bin
        # Get the absolute path of the directory where the script is located
        SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
        # Change the current working directory to the script's directory
        cd "\$SCRIPT_DIR" || exit 1
        java -jar "\$SCRIPT_DIR/${jarFile.name}" update_planet
        """.stripIndent()
        scriptFile.setExecutable(true)
    }
}

tasks.register('buildWithPlanetUpdateShScript') {
    dependsOn jar, createPlanetUpdateShScript
}