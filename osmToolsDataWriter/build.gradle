configurations { providedCompile }

dependencies {

    implementation project(":osmToolsCore")

    // Locus API
    implementation 'com.asamm:locus-api-core:0.9.37'

    implementation 'org.xerial:sqlite-jdbc:3.46.1.3'

    implementation group: 'net.sf.trove4j', name: 'trove4j', version:'3.0.3'
    implementation 'org.postgresql:postgresql:42.7.3'

    implementation 'org.wololo:jts2geojson:0.18.1'
    implementation 'org.openstreetmap.osmosis:osmosis-core:0.49.2'

    implementation 'commons-io:commons-io:2.16.1'
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'net.sf.kxml:kxml2:2.2.2'
    implementation 'org.locationtech.jts:jts-core:1.16.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:2.0.10"
}

sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile

def versionCode = "0.3.7"
def newArchiveName = "osmToolsDataWriter_${versionCode}.jar"

jar {
    archiveFileName = newArchiveName;
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from('src/main/config/') {
        include 'plugin.xml'
    }
}

task fatJar(type: Jar, dependsOn: configurations.runtimeClasspath) {
    archiveClassifier = 'jar-with-dependencies'
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }

    }
    with jar
}

def releaseTask = tasks.create(name: '_releaseOsmToolsDataWriter') {
    doLast {
        println("Copy " + tasks.getAt("jar").archivePath)
        copy {
            from tasks.getAt("jar").archivePath
            into "../_work/osmosis/plugins"
        }
    }
}
releaseTask.dependsOn jar
